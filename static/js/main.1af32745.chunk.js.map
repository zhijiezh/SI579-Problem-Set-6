{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","savedWords","setSavedWords","displayName","setDisplayName","displayList","setDisplayList","makeDisplayList","data","isRhyme","length","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","groupBy","group","num","Number","map","item","word","className","onClick","tmpList","concat","Math","random","handleRhymesClick","fetch","URLSearchParams","rel_rhy","toString","then","response","json","err","console","error","href","target","id","join","type","placeholder","value","onChange","e","onKeyDown","event","ml","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1af32745.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\nfunction groupBy(objects, property) {\n  // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  // value for property (obj[property])\n  if (typeof property !== \"function\") {\n    const propName = property;\n    property = (obj) => obj[propName];\n  }\n\n  const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  for (const object of objects) {\n    const groupName = property(object);\n    //Make sure that the group exists\n    if (!groupedObjects.has(groupName)) {\n      groupedObjects.set(groupName, []);\n    }\n    groupedObjects.get(groupName).push(object);\n  }\n\n  // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  const result = {};\n  for (const key of Array.from(groupedObjects.keys()).sort()) {\n    result[key] = groupedObjects.get(key);\n  }\n  return result;\n}\n\nfunction addS(num) {\n  if (num === 1) {\n    return \"\";\n  } else {\n    return \"s\";\n  }\n}\n\n\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [savedWords, setSavedWords] = useState([]);\n  const [displayName, setDisplayName] = useState(\"\");\n  const [displayList, setDisplayList] = useState(<ul></ul>);\n\n  const makeDisplayList = (data, isRhyme) =>{\n    if(data.length ===0){\n      setDisplayName(\"(no results)\")\n      return\n    }\n    if (isRhyme) {\n      data = groupBy(data, \"numSyllables\");\n      let result = [];\n      for (let group in data) {\n        result.push(\n          <div key={Math.random()}>\n            <h3 >{group+' syllable'+addS(Number)}</h3>\n            <ul>\n              {data[group].map((item) => {\n                return (\n                  <li key={Math.random()}>\n                    {item.word}\n                    <button className=\"btn btn-outline-success\" onClick={()=>{\n                      setSavedWords((savedWords)=>{\n                        const tmpList = savedWords.concat();\n                        tmpList.push(item.word)\n                        return tmpList\n                      })\n                    }}>(save)</button>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        );\n      }\n      return result;\n    }else{\n      return data.map((item)=>(\n        <li key={Math.random()}>\n                    {item.word}\n                    <button className=\"btn btn-outline-success\" onClick={()=>{\n                      setSavedWords((savedWords)=>{\n                        const tmpList = savedWords.concat();\n                        tmpList.push(item.word)\n                        return tmpList\n                      })\n                    }}>(save)</button>\n                  </li>\n      ))\n    }\n  }\n\n  const handleRhymesClick = () => {\n    setDisplayName(\"...loading\");\n    setDisplayList();\n    fetch(\n      `https://api.datamuse.com/words?${new URLSearchParams({\n        rel_rhy: input,\n      }).toString()}`\n    )\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          setDisplayName(`Words that rhyme with ${input}: `);\n          setDisplayList(makeDisplayList(data, true));\n        },\n        (err) => {\n          console.error(err);\n        }\n      );\n  }\n\n  const handleSynonymsClick = () => {\n    setDisplayList(\"...loading\")\n    setDisplayList();\n    fetch(\n      `https://api.datamuse.com/words?${new URLSearchParams({\n        ml: input,\n      }).toString()}`\n    )\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          setDisplayName(`Words that rhyme with ${input}: `);\n          setDisplayList(makeDisplayList(data, false));\n        },\n        (err) => {\n          console.error(err);\n        }\n      );\n  }\n\n  const handleKeyDown = (event) =>{\n    if (event.key === 'Enter'){\n      handleRhymesClick()\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <div>Repo address: <a href=\"https://github.com/zhijiezh/SI579-Problem-Set-6\" target=\"_blank\">https://github.com/zhijiezh/SI579-Problem-Set-6</a></div>\n      <div>\n        <h1 className=\"row\">Rhyme Finder (579 Problem Set 6)</h1>\n        <div className=\"row\">\n          <div className=\"col\">\n            Saved words: <span id=\"saved_words\">{savedWords.join(\", \")}</span>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-group col\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Enter a word\"\n              value={input}\n              onChange={(e) => {\n                setInput(e.target.value);\n              }}\n              onKeyDown={handleKeyDown}\n            />\n            <button\n              id=\"show_rhymes\"\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={handleRhymesClick}\n            >\n              Show rhyming words\n            </button>\n            <button\n              id=\"show_synonyms\"\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={handleSynonymsClick}\n            >\n              Show synonyms\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <h2 className=\"col\" id=\"output_description\">\n            {displayName}\n          </h2>\n        </div>\n        <div className=\"output row\">\n          <output id=\"word_output\" className=\"col\">\n            {displayList}\n          </output>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}